// Code generated by mockery v0.0.0-dev. DO NOT EDIT.

package mocks

import (
	context "context"

	domain "github.com/samuskitchen/beer-api-clean-arch/domain"
	mock "github.com/stretchr/testify/mock"
)

// BeerUsecase is an autogenerated mock type for the BeerUsecase type
type BeerUsecase struct {
	mock.Mock
}

// CreateBeerWithId provides a mock function with given fields: ctx, beers
func (_m *BeerUsecase) CreateBeerWithId(ctx context.Context, beers *domain.Beer) error {
	ret := _m.Called(ctx, beers)

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context, *domain.Beer) error); ok {
		r0 = rf(ctx, beers)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// GetAllBeers provides a mock function with given fields: ctx
func (_m *BeerUsecase) GetAllBeers(ctx context.Context) ([]domain.Beer, error) {
	ret := _m.Called(ctx)

	var r0 []domain.Beer
	if rf, ok := ret.Get(0).(func(context.Context) []domain.Beer); ok {
		r0 = rf(ctx)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]domain.Beer)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(context.Context) error); ok {
		r1 = rf(ctx)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// GetBeerById provides a mock function with given fields: ctx, id
func (_m *BeerUsecase) GetBeerById(ctx context.Context, id uint) (domain.Beer, error) {
	ret := _m.Called(ctx, id)

	var r0 domain.Beer
	if rf, ok := ret.Get(0).(func(context.Context, uint) domain.Beer); ok {
		r0 = rf(ctx, id)
	} else {
		r0 = ret.Get(0).(domain.Beer)
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(context.Context, uint) error); ok {
		r1 = rf(ctx, id)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// GetOneBoxPrice provides a mock function with given fields: ctx, id, currency, quantity
func (_m *BeerUsecase) GetOneBoxPrice(ctx context.Context, id uint, currency string, quantity int) (float64, error) {
	ret := _m.Called(ctx, id, currency, quantity)

	var r0 float64
	if rf, ok := ret.Get(0).(func(context.Context, uint, string, int) float64); ok {
		r0 = rf(ctx, id, currency, quantity)
	} else {
		r0 = ret.Get(0).(float64)
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(context.Context, uint, string, int) error); ok {
		r1 = rf(ctx, id, currency, quantity)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}
